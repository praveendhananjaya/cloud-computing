name: Deploy Patient Service

env:
  SERVICE_NAME: Patient
  PROJECT_ID: pure-fold-445308-t2
  DOCKER_IMAGE_URL: us-central1-docker.pkg.dev/pure-fold-445308-t2/patient-record/patient-service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dockerize-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Authenticate with Google Cloud
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Step 3: Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Step 4: Configure Docker for Artifact Registry
      - name: Configure Docker for GCP
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_URL }}:latest -f Patient_Record_Service/Dockerfile Patient_Record_Service/.
          docker push ${{ env.DOCKER_IMAGE_URL }}:latest

      # Step 6: Authenticate with Kubernetes Cluster
      - name: Authenticate Kubernetes
        run: |
          gcloud container clusters get-credentials k8s-dev --region us-central1 --project ${{ env.PROJECT_ID }}
        env:
          KUBECONFIG: $HOME/.kube/config

      - name: Verify Kubernetes Context
        run: |
          kubectl config current-context

      # Step 7: Apply Kubernetes Deployment
      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f deployment.yaml --validate=false

      # Step 8: Rollout Restart Kubernetes Deployment
      - name: Rollout Restart Deployment
        run: |
          kubectl rollout restart deployment patient-record
